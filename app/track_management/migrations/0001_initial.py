# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-02-05 22:38
from __future__ import unicode_literals

import app.track_management.models
import autoslug.fields
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='mdlGPXFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=4000, null=True, verbose_name='Title')),
                ('gpx_file', models.FileField(blank=True, null=True, upload_to=app.track_management.models.GPX_Folder)),
                ('version', models.CharField(blank=True, max_length=10, null=True, verbose_name='XML Version')),
                ('creator', models.CharField(blank=True, max_length=255, null=True, verbose_name='Creator')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='The name of the GPX file.')),
                ('description', models.CharField(blank=True, max_length=4000, null=True, verbose_name='A description of the contents of the GPX file.')),
                ('time', models.DateTimeField(blank=True, null=True, verbose_name='The creation date of the file.')),
                ('keywords', models.TextField(blank=True, null=True, verbose_name='Keywords associated with the file.')),
                ('bound_min', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='Minimum coordinates which describe the extent of the coordinates in the file.')),
                ('bound_max', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='Maximum coordinates which describe the extent of the coordinates in the file.')),
                ('author_name', models.CharField(blank=True, max_length=10, null=True, verbose_name='The person or organization who created the GPX file.')),
                ('author_email', models.EmailField(blank=True, max_length=10, null=True, verbose_name='GPX author email')),
                ('author_link', models.URLField(blank=True, max_length=255, null=True, verbose_name='GPX author link')),
                ('author_link_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Text of the GPX author link.')),
                ('author_link_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Mime type of GPX author link')),
                ('copyright_author', models.CharField(blank=True, max_length=255, null=True, verbose_name='Copyright holder.')),
                ('copyright_year', models.CharField(blank=True, max_length=4, null=True, verbose_name='Year of copyright.')),
                ('copyright_license', models.URLField(blank=True, max_length=255, null=True, verbose_name='Link to external file containing license text.')),
                ('extensions', models.TextField(blank=True, null=True, verbose_name='Extensions.')),
            ],
            options={
                'verbose_name': 'GPX File',
                'verbose_name_plural': 'GPX Files',
                'db_table': 'GPX_File',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXFileLinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(blank=True, max_length=255, null=True, verbose_name='URLs associated with the location described in the file.')),
                ('link_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Text of the GPX location link.')),
                ('link_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Mime type of GPX location link')),
                ('gpx_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXFile')),
            ],
            options={
                'verbose_name': 'GPX File Link',
                'verbose_name_plural': 'GPX File Links',
                'db_table': 'GPX_File_Link',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXRoute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=10, null=True, verbose_name='GPS name of route.')),
                ('comment', models.CharField(blank=True, max_length=4000, null=True, verbose_name='GPS comment for route.')),
                ('description', models.CharField(blank=True, max_length=4000, null=True, verbose_name='User description of route.')),
                ('source', models.CharField(blank=True, max_length=50, null=True, verbose_name='Source of data')),
                ('number', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='GPS route  number.')),
                ('type', models.CharField(blank=True, max_length=255, null=True, verbose_name='Type (classification) of route .')),
                ('extensions', models.TextField(blank=True, null=True, verbose_name='Extensions.')),
                ('trackLine', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326)),
                ('gpx_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXFile')),
            ],
            options={
                'verbose_name': 'GPX Route',
                'verbose_name_plural': 'GPX Routes',
                'db_table': 'GPX_Route',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXRouteLinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(blank=True, max_length=255, null=True, verbose_name='Links to external information about route.')),
                ('link_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Text of the GPX route link.')),
                ('link_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Mime type of GPX route link')),
                ('gpx_route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXRoute')),
            ],
            options={
                'verbose_name': 'GPX Route Link',
                'verbose_name_plural': 'GPX Route Links',
                'db_table': 'GPX_Route_Link',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXRoutePoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='The latitude and longitude of the point.')),
                ('elevation', models.FloatField(blank=True, null=True, verbose_name='Elevation (in meters) of the point')),
                ('time', models.DateTimeField(blank=True, null=True, verbose_name='Creation/modification timestamp for element (UTC)')),
                ('magnetic_variation', models.FloatField(blank=True, null=True, verbose_name='Magnetic variation (in degrees) at the point')),
                ('geoid_height', models.FloatField(blank=True, null=True, verbose_name='Height (in meters) of geoid (mean sea level) above WGS84 earth ellipsoid. ')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='The GPS name of the waypoint.')),
                ('comment', models.CharField(blank=True, max_length=500, null=True, verbose_name='GPS waypoint comment.')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='A text description of the element.')),
                ('source', models.CharField(blank=True, max_length=50, null=True, verbose_name='Source of data.')),
                ('symbol', models.CharField(blank=True, max_length=50, null=True, verbose_name='Text of GPS symbol name.')),
                ('type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Type (classification) of the waypoint')),
                ('type_of_gpx_fix', models.CharField(blank=True, choices=[('none', 'none'), ('2d', '2d'), ('3d', '3d'), ('dgps', 'dgps'), ('pps', 'pps')], max_length=4, null=True, verbose_name='Type of GPX fix.')),
                ('satellites', models.DecimalField(blank=True, decimal_places=0, max_digits=6, null=True, verbose_name='Number of satellites used to calculate the GPX fix.')),
                ('horizontal_dilution', models.FloatField(blank=True, null=True, verbose_name='Horizontal dilution of precision.')),
                ('vertical_dilution', models.FloatField(blank=True, null=True, verbose_name='Vertical dilution of precision.')),
                ('position_dilution', models.FloatField(blank=True, null=True, verbose_name='Position dilution of precision.')),
                ('age_of_dgps_data', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Number of seconds since last DGPS update.')),
                ('dgps_id', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='ID of DGPS station used in differential correction.')),
                ('extensions', models.TextField(blank=True, null=True, verbose_name='Extensions.')),
                ('heart_rate', models.DecimalField(blank=True, decimal_places=0, max_digits=3, null=True, verbose_name='HR represents the heart rate in beats per minute.')),
                ('cadence', models.DecimalField(blank=True, decimal_places=0, max_digits=6, null=True, verbose_name='Cadence represents the cadence in revolutions per minute..')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='Temp represents the temperature in degrees celcius')),
                ('distance', models.FloatField(blank=True, null=True, verbose_name='Distance in meters as measured by GPS or wheel sensor')),
                ('altitude', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Altitude in meters')),
                ('sea_level_pressure', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Sea level pressure')),
                ('speed', models.FloatField(blank=True, null=True, verbose_name='Horitzontal Speed in meters per second (m/s)')),
                ('vertical_speed', models.FloatField(blank=True, null=True, verbose_name='Vertical Speed in meters per second (m/s)')),
                ('energy', models.FloatField(blank=True, null=True, verbose_name='Energy in Calories')),
                ('gpx_route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXRoute')),
            ],
            options={
                'verbose_name': 'GPX Route Point',
                'verbose_name_plural': 'GPX Route Points',
                'db_table': 'GPX_Route_Point',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXRoutePointLinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(blank=True, max_length=255, null=True, verbose_name='Links to external information about route.')),
                ('link_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Text of the GPX route link.')),
                ('link_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Mime type of GPX route link')),
            ],
            options={
                'verbose_name': 'GPX Route Point Link',
                'verbose_name_plural': 'GPX Route Point Links',
                'db_table': 'GPX_Route_Point_Link',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=10, null=True, verbose_name='GPS name of track.')),
                ('comment', models.CharField(blank=True, max_length=4000, null=True, verbose_name='GPS comment for track.')),
                ('description', models.CharField(blank=True, max_length=4000, null=True, verbose_name='User description of track.')),
                ('source', models.CharField(blank=True, max_length=50, null=True, verbose_name='Source of data')),
                ('number', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='GPS track number.')),
                ('type', models.CharField(blank=True, max_length=255, null=True, verbose_name='Type (classification) of track.')),
                ('extensions', models.TextField(blank=True, null=True, verbose_name='Extensions.')),
                ('trackLine', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326)),
                ('gpx_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXFile')),
            ],
            options={
                'verbose_name': 'GPX Track',
                'verbose_name_plural': 'GPX Tracks',
                'db_table': 'GPX_Track',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXTrackLinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(blank=True, max_length=255, null=True, verbose_name='Links to external information about track.')),
                ('link_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Text of the GPX track link.')),
                ('link_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Mime type of GPX track link')),
                ('gpx_track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXTrack')),
            ],
            options={
                'verbose_name': 'GPX Track Link',
                'verbose_name_plural': 'GPX Track Links',
                'db_table': 'GPX_Track_Link',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXTrackSegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extensions', models.TextField(blank=True, null=True, verbose_name='Extensions.')),
                ('segmentLine', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326)),
                ('gpx_track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXTrack')),
            ],
            options={
                'verbose_name': 'GPX Track Segment',
                'verbose_name_plural': 'GPX Track Segments',
                'db_table': 'GPX_Track_Segment',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXTrackSegmentPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='The latitude and longitude of the point.')),
                ('elevation', models.FloatField(blank=True, null=True, verbose_name='Elevation (in meters) of the point')),
                ('time', models.DateTimeField(blank=True, null=True, verbose_name='Creation/modification timestamp for element (UTC)')),
                ('magnetic_variation', models.FloatField(blank=True, null=True, verbose_name='Magnetic variation (in degrees) at the point')),
                ('geoid_height', models.FloatField(blank=True, null=True, verbose_name='Height (in meters) of geoid (mean sea level) above WGS84 earth ellipsoid. ')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='The GPS name of the waypoint.')),
                ('comment', models.CharField(blank=True, max_length=500, null=True, verbose_name='GPS waypoint comment.')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='A text description of the element.')),
                ('source', models.CharField(blank=True, max_length=50, null=True, verbose_name='Source of data.')),
                ('symbol', models.CharField(blank=True, max_length=50, null=True, verbose_name='Text of GPS symbol name.')),
                ('type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Type (classification) of the waypoint')),
                ('type_of_gpx_fix', models.CharField(blank=True, choices=[('none', 'none'), ('2d', '2d'), ('3d', '3d'), ('dgps', 'dgps'), ('pps', 'pps')], max_length=4, null=True, verbose_name='Type of GPX fix.')),
                ('satellites', models.DecimalField(blank=True, decimal_places=0, max_digits=6, null=True, verbose_name='Number of satellites used to calculate the GPX fix.')),
                ('horizontal_dilution', models.FloatField(blank=True, null=True, verbose_name='Horizontal dilution of precision.')),
                ('vertical_dilution', models.FloatField(blank=True, null=True, verbose_name='Vertical dilution of precision.')),
                ('position_dilution', models.FloatField(blank=True, null=True, verbose_name='Position dilution of precision.')),
                ('age_of_dgps_data', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Number of seconds since last DGPS update.')),
                ('dgps_id', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='ID of DGPS station used in differential correction.')),
                ('extensions', models.TextField(blank=True, null=True, verbose_name='Extensions.')),
                ('heart_rate', models.DecimalField(blank=True, decimal_places=0, max_digits=3, null=True, verbose_name='HR represents the heart rate in beats per minute.')),
                ('cadence', models.DecimalField(blank=True, decimal_places=0, max_digits=6, null=True, verbose_name='Cadence represents the cadence in revolutions per minute..')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='Temp represents the temperature in degrees celcius')),
                ('distance', models.FloatField(blank=True, null=True, verbose_name='Distance in meters as measured by GPS or wheel sensor')),
                ('altitude', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Altitude in meters')),
                ('sea_level_pressure', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Sea level pressure')),
                ('speed', models.FloatField(blank=True, null=True, verbose_name='Horitzontal Speed in meters per second (m/s)')),
                ('vertical_speed', models.FloatField(blank=True, null=True, verbose_name='Vertical Speed in meters per second (m/s)')),
                ('energy', models.FloatField(blank=True, null=True, verbose_name='Energy in Calories')),
                ('gpx_track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXTrack')),
            ],
            options={
                'verbose_name': 'GPX Track Segment Point',
                'verbose_name_plural': 'GPX Track Segment Points',
                'db_table': 'GPX_Track_Segment_Point',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXTrackSegmentPointLinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(blank=True, max_length=255, null=True, verbose_name='Links to external information about track.')),
                ('link_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Text of the GPX track link.')),
                ('link_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Mime type of GPX track link')),
                ('gpx_track_segment_point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXTrackSegmentPoint')),
            ],
            options={
                'verbose_name': 'GPX Track Segment Point Link',
                'verbose_name_plural': 'GPX Track Segment Point Links',
                'db_table': 'GPX_Track_Segment_Point_Link',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXWaypoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='The latitude and longitude of the point.')),
                ('elevation', models.FloatField(blank=True, null=True, verbose_name='Elevation (in meters) of the point')),
                ('time', models.DateTimeField(blank=True, null=True, verbose_name='Creation/modification timestamp for element (UTC)')),
                ('magnetic_variation', models.FloatField(blank=True, null=True, verbose_name='Magnetic variation (in degrees) at the point')),
                ('geoid_height', models.FloatField(blank=True, null=True, verbose_name='Height (in meters) of geoid (mean sea level) above WGS84 earth ellipsoid. ')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='The GPS name of the waypoint.')),
                ('comment', models.CharField(blank=True, max_length=500, null=True, verbose_name='GPS waypoint comment.')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='A text description of the element.')),
                ('source', models.CharField(blank=True, max_length=50, null=True, verbose_name='Source of data.')),
                ('symbol', models.CharField(blank=True, max_length=50, null=True, verbose_name='Text of GPS symbol name.')),
                ('type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Type (classification) of the waypoint')),
                ('type_of_gpx_fix', models.CharField(blank=True, choices=[('none', 'none'), ('2d', '2d'), ('3d', '3d'), ('dgps', 'dgps'), ('pps', 'pps')], max_length=4, null=True, verbose_name='Type of GPX fix.')),
                ('satellites', models.DecimalField(blank=True, decimal_places=0, max_digits=6, null=True, verbose_name='Number of satellites used to calculate the GPX fix.')),
                ('horizontal_dilution', models.FloatField(blank=True, null=True, verbose_name='Horizontal dilution of precision.')),
                ('vertical_dilution', models.FloatField(blank=True, null=True, verbose_name='Vertical dilution of precision.')),
                ('position_dilution', models.FloatField(blank=True, null=True, verbose_name='Position dilution of precision.')),
                ('age_of_dgps_data', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Number of seconds since last DGPS update.')),
                ('dgps_id', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='ID of DGPS station used in differential correction.')),
                ('extensions', models.TextField(blank=True, null=True, verbose_name='Extensions.')),
                ('heart_rate', models.DecimalField(blank=True, decimal_places=0, max_digits=3, null=True, verbose_name='HR represents the heart rate in beats per minute.')),
                ('cadence', models.DecimalField(blank=True, decimal_places=0, max_digits=6, null=True, verbose_name='Cadence represents the cadence in revolutions per minute..')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='Temp represents the temperature in degrees celcius')),
                ('distance', models.FloatField(blank=True, null=True, verbose_name='Distance in meters as measured by GPS or wheel sensor')),
                ('altitude', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Altitude in meters')),
                ('sea_level_pressure', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Sea level pressure')),
                ('speed', models.FloatField(blank=True, null=True, verbose_name='Horitzontal Speed in meters per second (m/s)')),
                ('vertical_speed', models.FloatField(blank=True, null=True, verbose_name='Vertical Speed in meters per second (m/s)')),
                ('energy', models.FloatField(blank=True, null=True, verbose_name='Energy in Calories')),
                ('gpx_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXFile')),
            ],
            options={
                'verbose_name': 'GPX Waypoint',
                'verbose_name_plural': 'GPX Waypoints',
                'db_table': 'GPX_Waypoint',
            },
        ),
        migrations.CreateModel(
            name='mdlGPXWaypointLinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(blank=True, max_length=255, null=True, verbose_name='Links to external information about Waypoint.')),
                ('link_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Text of the GPX Waypoint link.')),
                ('link_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Mime type of GPX Waypoint link')),
                ('gpx_waypoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXWaypoint')),
            ],
            options={
                'verbose_name': 'GPX Waypoint Link',
                'verbose_name_plural': 'GPX Waypoint Links',
                'db_table': 'GPX_Waypoint_Link',
            },
        ),
        migrations.CreateModel(
            name='mdlTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='GPS name of track.', max_length=4000)),
                ('description', models.TextField(blank=True, help_text='User description of track.', null=True)),
                ('type', models.CharField(blank=True, choices=[('gpx', 'GPX'), ('klm', 'KLM'), ('fir', 'FIT')], help_text='Track type.', max_length=3, null=True)),
                ('slug', autoslug.fields.AutoSlugField(blank=True, editable=False, null=True, populate_from='name', unique_with=('name',))),
                ('hash_code', models.UUIDField(blank=True, db_index=True, default=uuid.uuid4, editable=False, null=True)),
                ('deleted', models.BooleanField(default=False, help_text='Is the track deleted?')),
                ('created_timestamp', models.DateTimeField(auto_now_add=True)),
                ('updated_timestamp', models.DateTimeField(auto_now=True)),
                ('creation_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Track',
                'verbose_name_plural': 'Tracks',
                'ordering': ('name',),
                'db_table': 'track',
            },
        ),
        migrations.AddField(
            model_name='mdlgpxroutepointlinks',
            name='gpx_track_segment_point',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlGPXTrackSegmentPoint'),
        ),
        migrations.AddField(
            model_name='mdlgpxfile',
            name='track',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='track_management.mdlTrack'),
        ),
    ]
